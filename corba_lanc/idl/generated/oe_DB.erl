%%------------------------------------------------------------
%%
%% Implementation stub file
%% 
%% Target: oe_DB
%% Source: idl/DB.idl
%% IC vsn: 4.2.27
%% 
%% This file is automatically generated. DO NOT EDIT IT.
%%
%%------------------------------------------------------------

-module(oe_DB).
-ic_compiled("4_2_27").


-include_lib("orber/include/ifr_types.hrl").

%% Interface functions

-export([oe_register/0, oe_unregister/0, oe_get_module/5]).
-export([oe_dependency/0]).



oe_register() ->
    OE_IFR = orber_ifr:find_repository(),

    register_tests(OE_IFR),

    _OE_1 = oe_get_top_module(OE_IFR, "IDL:DB:1.0", "DB", "1.0"),

    orber_ifr:'ModuleDef_create_alias'(_OE_1, "IDL:DB/EmployeeNo:1.0", "EmployeeNo", "1.0", orber_ifr:'Repository_create_idltype'(OE_IFR, tk_ulong)),

    orber_ifr:'ModuleDef_create_enum'(_OE_1, "IDL:DB/Department:1.0", "Department", "1.0", ["Department1","Department2"]),

    orber_ifr:'ModuleDef_create_struct'(_OE_1, "IDL:DB/employee:1.0", "employee", "1.0", [#structmember{name="No", type=tk_ulong, type_def=orber_ifr:'Repository_create_idltype'(OE_IFR, tk_ulong)}, #structmember{name="Name", type={tk_string,0}, type_def=orber_ifr:'Repository_create_idltype'(OE_IFR, {tk_string,0})}, #structmember{name="Address", type={tk_string,0}, type_def=orber_ifr:'Repository_create_idltype'(OE_IFR, {tk_string,0})}, #structmember{name="Dpt", type={tk_enum,"IDL:DB/Department:1.0","Department",
                                   ["Department1","Department2"]}, type_def=orber_ifr:'Repository_create_idltype'(OE_IFR, {tk_enum,
                                               "IDL:DB/Department:1.0",
                                               "Department",
                                               ["Department1","Department2"]})}]),

    orber_ifr:'ModuleDef_create_alias'(_OE_1, "IDL:DB/EmployeeData:1.0", "EmployeeData", "1.0", orber_ifr:'Repository_create_idltype'(OE_IFR, {tk_struct,
                                               "IDL:DB/employee:1.0",
                                               "employee",
                                               [{"No",tk_ulong},
                                                {"Name",{tk_string,0}},
                                                {"Address",{tk_string,0}},
                                                {"Dpt",
                                                 {tk_enum,
                                                  "IDL:DB/Department:1.0",
                                                  "Department",
                                                  ["Department1",
                                                   "Department2"]}}]})),

    _OE_2 = orber_ifr:'ModuleDef_create_interface'(_OE_1, "IDL:DB/CommonUser:1.0", "CommonUser", "1.0", []),

    orber_ifr:'InterfaceDef_create_operation'(_OE_2, "IDL:DB/CommonUser/lookup:1.0", "lookup", "1.0", orber_ifr:'Repository_create_idltype'(OE_IFR, {tk_struct,
                                               "IDL:DB/employee:1.0",
                                               "employee",
                                               [{"No",tk_ulong},
                                                {"Name",{tk_string,0}},
                                                {"Address",{tk_string,0}},
                                                {"Dpt",
                                                 {tk_enum,
                                                  "IDL:DB/Department:1.0",
                                                  "Department",
                                                  ["Department1",
                                                   "Department2"]}}]}), 'OP_NORMAL', [#parameterdescription{name="ENo", type=tk_ulong, type_def=orber_ifr:'Repository_create_idltype'(OE_IFR, tk_ulong), mode='PARAM_IN'}
], [], []),

    _OE_3 = orber_ifr:'ModuleDef_create_interface'(_OE_1, "IDL:DB/Administrator:1.0", "Administrator", "1.0", [orber_ifr:lookup_id(OE_IFR,"IDL:DB/CommonUser:1.0")]),

    orber_ifr:'InterfaceDef_create_operation'(_OE_3, "IDL:DB/Administrator/delete:1.0", "delete", "1.0", orber_ifr:'Repository_create_idltype'(OE_IFR, tk_void), 'OP_NORMAL', [#parameterdescription{name="ENo", type=tk_ulong, type_def=orber_ifr:'Repository_create_idltype'(OE_IFR, tk_ulong), mode='PARAM_IN'}
], [], []),

    _OE_4 = orber_ifr:'ModuleDef_create_interface'(_OE_1, "IDL:DB/Access:1.0", "Access", "1.0", []),

    orber_ifr:'InterfaceDef_create_alias'(_OE_4, "IDL:DB/Access/UserID:1.0", "UserID", "1.0", orber_ifr:'Repository_create_idltype'(OE_IFR, {tk_string,10})),

    orber_ifr:'InterfaceDef_create_alias'(_OE_4, "IDL:DB/Access/Password:1.0", "Password", "1.0", orber_ifr:'Repository_create_idltype'(OE_IFR, {tk_string,10})),

    orber_ifr:'InterfaceDef_create_operation'(_OE_4, "IDL:DB/Access/logon:1.0", "logon", "1.0", orber_ifr:'Repository_create_idltype'(OE_IFR, {tk_objref,
                                               "IDL:DB/CommonUser:1.0",
                                               "CommonUser"}), 'OP_NORMAL', [#parameterdescription{name="PW", type={tk_string,10}, type_def=orber_ifr:'Repository_create_idltype'(OE_IFR, {tk_string,10}), mode='PARAM_IN'}
, #parameterdescription{name="ID", type={tk_string,10}, type_def=orber_ifr:'Repository_create_idltype'(OE_IFR, {tk_string,10}), mode='PARAM_IN'}
], [], []),

    ok.


%% General IFR registration checks.
register_tests(OE_IFR)->
  re_register_test(OE_IFR),
  include_reg_test(OE_IFR).


%% IFR type Re-registration checks.
re_register_test(OE_IFR)->
  case orber_ifr:'Repository_lookup_id'(OE_IFR,"IDL:DB/EmployeeNo:1.0") of
    []  ->
      true;
    _ ->
      exit({allready_registered,"IDL:DB/EmployeeNo:1.0"})
 end.


%% No included idl-files detected.
include_reg_test(_OE_IFR) -> true.


%% Fetch top module reference, register if unregistered.
oe_get_top_module(OE_IFR, ID, Name, Version) ->
  case orber_ifr:'Repository_lookup_id'(OE_IFR, ID) of
    [] ->
      orber_ifr:'Repository_create_module'(OE_IFR, ID, Name, Version);
    Mod  ->
      Mod
   end.

%% Fetch module reference, register if unregistered.
oe_get_module(OE_IFR, OE_Parent, ID, Name, Version) ->
  case orber_ifr:'Repository_lookup_id'(OE_IFR, ID) of
    [] ->
      orber_ifr:'ModuleDef_create_module'(OE_Parent, ID, Name, Version);
    Mod  ->
      Mod
   end.



oe_unregister() ->
    OE_IFR = orber_ifr:find_repository(),

    oe_destroy(OE_IFR, "IDL:DB/Access:1.0"),
    oe_destroy(OE_IFR, "IDL:DB/Administrator:1.0"),
    oe_destroy(OE_IFR, "IDL:DB/CommonUser:1.0"),
    oe_destroy(OE_IFR, "IDL:DB/EmployeeData:1.0"),
    oe_destroy(OE_IFR, "IDL:DB/employee:1.0"),
    oe_destroy(OE_IFR, "IDL:DB/Department:1.0"),
    oe_destroy(OE_IFR, "IDL:DB/EmployeeNo:1.0"),
    oe_destroy_if_empty(OE_IFR, "IDL:DB:1.0"),
    ok.


oe_destroy_if_empty(OE_IFR,IFR_ID) ->
    case orber_ifr:'Repository_lookup_id'(OE_IFR, IFR_ID) of
	[] ->
	    ok;
	Ref ->
	    case orber_ifr:contents(Ref, 'dk_All', 'true') of
		[] ->
		    orber_ifr:destroy(Ref),
		    ok;
		_ ->
		    ok
	    end
    end.

oe_destroy(OE_IFR,IFR_ID) ->
    case orber_ifr:'Repository_lookup_id'(OE_IFR, IFR_ID) of
	[] ->
	    ok;
	Ref ->
	    orber_ifr:destroy(Ref),
	    ok
    end.



%% Idl file dependency list function
oe_dependency() ->

    [].

